coder:
  coder:
    annotations: {}
    nodeSelector: {}
    env:
      - name: "CODER_PG_CONNECTION_URL"
        valueFrom:
          secretKeyRef:
            name: coder-db-url
            key: url
      - name: "CODER_PROMETHEUS_ENABLE"
        value: "true"
    image:
      repo: "ghcr.io/coder/coder"
      #tag: ""
      pullPolicy: "IfNotPresent"
      pullSecrets: []
    ingress:
      enable: true
      host: "coder.apps.example.com"
      className: ""
      tls:
        enable: true
        issuerName: "default-selfsigned-ca"
        issuerKind: "ClusterIssuer"
        secretName: "coder-tls-cert"
    resources: {}
    service:
      enable: true
      type: "LoadBalancer"
      externalTrafficPolicy: "Cluster"
      # if service.type LoadBalancer
      loadBalancerIP: ""
    serviceAccount:
      name: "coder"
    volumes: []
    replicaCount: 1
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/instance"
                    operator: "In"
                    values:
                      - "coder"
              topologyKey: "kubernetes.io/hostname"
            weight: 1

postgresql:
  architecture: standalone
  auth:
    username: "coder"
    password: "P@ssword1"
    database: "coder"
    postgresPassword: "P@ssword1"
  nameOverride: "coder-postgresql"
  fullnameOverride: ""
  image:
    registry: "docker.io"
    repository: "bitnami/postgresql"
    #tag: "16.4.0-debian-12-r13"
    pullPolicy: "IfNotPresent"
    pullSecrets: []
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  primary:
    affinity: {}
    nodeSelector: {}
    networkPolicy:
      enabled: true
      allowExternal: true
      allowExternalEgress: true
    persistence:
      enabled: true
      accessModes:
        - "ReadWriteOnce"
      existingClaim: ""
      storageClass: ""
      size: "10Gi"
      #volumeName: "data"
    resources: {}
    service:
      type: "ClusterIP"
      ports:
        postgresql: 5432
    updateStrategy:
      type: "RollingUpdate"
  tls:
    enabled: true
    autoGenerated: true
    preferServerCiphers: true
