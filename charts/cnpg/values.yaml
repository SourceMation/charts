# OLD EURODB
global:
  eurodb-standard:
    enabled: true
  eurodb-dev:
    enabled: false
  eurodb-full:
    enabled: false
  
# Operator
cloudnative-pg:
  monitoring:
    podMonitorEnabled: true
  containerSecurityContext:
    seccompProfile: {}
  podSecurityContext:
    seccompProfile: {}

# Helm (monitor)
kube-prometheus-stack:
  enabled: true
  kubeControllerManager:
    enabled: false
  nodeExporter:
    enabled: false
  defaultRules:
    create: true
    rules:
      alertmanager: false
      etcd: false
      configReloaders: false
      general: false
      k8s: true
      kubeApiserver: false
      kubeApiserverAvailability: false
      kubeApiserverSlos: false
      kubelet: true
      kubeProxy: false
      kubePrometheusGeneral: false
      kubePrometheusNodeRecording: false
      kubernetesApps: false
      kubernetesResources: false
      kubernetesStorage: false
      kubernetesSystem: false
      kubeScheduler: false
      kubeStateMetrics: false
      network: false
      node: true
      nodeExporterAlerting: false
      nodeExporterRecording: true
      prometheus: false
      prometheusOperator: false
  prometheus:
    enabled: true
    ingress:
      enabled: true
      hosts:
        - prometheus.example.com
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 10d
      retentionSize: ""
      replicas: 1
      logLevel: info
      affinity: {}
      resources: {}
      # requests:
      #   memory: 400Mi
      storageSpec: {}
      ## Using PersistentVolumeClaim
      ##
      #  volumeClaimTemplate:
      #    spec:
      #      storageClassName: gluster
      #      accessModes: ["ReadWriteOnce"]
      #      resources:
      #        requests:
      #          storage: 50Gi
      #    selector: {} 
  grafana:
    enabled: true
    adminPassword: prom-operator
    defaultDashboardsEnabled: false
    sidecar:
        dashboards:
          enabled: true
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - grafana.example.com
    # persistence:
    #   enabled: true
    #   type: sts
    #   storageClassName: "storageClassName"
    #   accessModes:
    #     - ReadWriteOnce
    #   size: 20Gi
    #   finalizers:
    #     - kubernetes.io/pvc-protection
  alertmanager:
    enabled: true

# Main
cnpg:
  cluster:
    metadata:
      name: postgresql-test
    spec:
      instances: 3
      storage:
        size: 1Gi
  pooler:
    metadata:
      name: pgbouncer-test
    spec:
      instances: 3
      type: rw
      pgbouncer:
        poolMode: session
        parameters:
          max_client_conn: "1000"
          default_pool_size: "10"



