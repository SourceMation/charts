---
apiVersion: v1
data:
  password: {{ .Values.gitlab.auth.gitlab_password | b64enc }}
kind: Secret
metadata:
  name: {{ include "common.names.shortname" $ }}-gitlab-initial-root-password
  namespace: {{ include "common.names.namespace" $ }}
  labels:
    {{- include "common.labels.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
type: Opaque

{{- if .Values.gitlab.postgresql.install }}
---
apiVersion: v1
data:
  postgresql-password: {{ .Values.gitlab.auth.postgresql_password | b64enc }}
  postgresql-postgres-password: {{ .Values.gitlab.auth.postgresql_postgres_password | b64enc }}
kind: Secret
metadata:
  name: {{ include "common.names.shortname" $ }}-postgresql-password
  namespace: {{ include "common.names.namespace" $ }}
  labels:
    {{- include "common.labels.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
type: Opaque
{{- end }}

{{- if and .Values.gitlab.global.ingress.enabled .Values.gitlab.global.ingress.tls.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ include "common.names.shortname" $ }}-wildcard-tls
  namespace: {{ include "common.names.namespace" $ }}
  labels:
    {{- include "common.labels.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
spec:
  secretName: {{ .Values.gitlab.global.ingress.tls.secretName }}
  isCA: false
  usages:
    - server auth
    - client auth
  commonName: wildcard.{{ .Values.gitlab.global.hosts.domain }}
  dnsNames:
    - "*.{{ .Values.gitlab.global.hosts.domain }}"
    - "*.{{ .Release.Namespace }}.svc.cluster.local"
    - "*.{{ .Release.Namespace }}.svc"
  issuerRef:
    group: cert-manager.io
    name: {{ .Values.gitlab.global.ingress.tls.clusterIssuer }}
    kind: ClusterIssuer
{{- end }}

{{- if and (index .Values.gitlab "gitlab-runner" "install") .Values.gitlab.global.ingress.tls.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.shortname" $ }}-create-ghrunner-secret
  namespace: {{ include "common.names.namespace" $ }}
  annotations:
    "helm.sh/hook": post-install,pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 10
  template:
    spec:
      initContainers:
      - name: wait-for-secret
        image: bitnami/kubectl:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          until kubectl get secret {{ .Values.gitlab.global.ingress.tls.secretName }} -n {{ .Release.Namespace }}; do
            echo "Waiting for {{ .Values.gitlab.global.ingress.tls.secretName }} secret..."
            sleep 5
          done
      containers:
      - name: create-ghrunner-secret
        image: bitnami/kubectl:latest
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          TLS_CRT=$(kubectl get secret {{ .Values.gitlab.global.ingress.tls.secretName }} -n {{ .Release.Namespace }} -o jsonpath='{.data.tls\.crt}'| base64 -d )
          kubectl create secret generic {{ index .Values.gitlab "gitlab-runner" "certsSecretName" }} \
            -n {{ .Release.Namespace }} \
            {{- if .Values.gitlab.global.hosts.hostSuffix }}
            --from-literal=gitlab-{{ .Values.gitlab.global.hosts.hostSuffix }}.{{ .Values.gitlab.global.hosts.domain }}.crt="$TLS_CRT" \
            {{- else }}
            --from-literal=gitlab.{{ .Values.gitlab.global.hosts.domain }}.crt="$TLS_CRT" \
            {{- end }}
            --dry-run=client -o yaml | kubectl apply -f -
      serviceAccountName: {{ include "common.names.shortname" $ }}-shared-secrets
      restartPolicy: Never
  backoffLimit: 2
{{- end }}
