questionsSpec: {}

certManager:
  ingress:
    # Enable cert-manager TLS managing for harbor ingress.
    enabled: false
    # cert-manager.io issuer kind, usually `ClusterIssuer`.
    issuerKind: ClusterIssuer
    # Name of cert-manager issuer.
    issuerName: default-selfsigned-ca
    # Default duration of generated TLS certificte.
    duration: 2160h # 90d
    # Max time period in which cert-manager renew TLS cert.
    renewBefore: 360h # 15d

harbor:
  expose:
    ingress:
      hosts:
        core: core.harbor.domain
  # The external URL for Harbor core service. It is used to
  # 1) populate the docker/helm commands showed on portal
  # 2) populate the token service URL returned to docker client
  #
  # Format: protocol://domain[:port]. Usually:
  # if "expose.type" is "ingress", the "domain" should be
  # the value of "expose.ingress.hosts.core"
  externalURL: https://core.harbor.domain

  # The persistence is enabled by default and a default StorageClass
  # is needed in the k8s cluster to provision volumes dynamically.
  persistence:
    enabled: true
    # Setting it to "keep" to avoid removing PVCs during a helm delete
    # operation. Leaving it empty will delete PVCs after the chart deleted
    # (this does not apply for PVCs that are created for internal database
    # and redis components, i.e. they are never deleted automatically)
    resourcePolicy: "keep"
    persistentVolumeClaim:
      registry:
        # Specify the "storageClass" used to provision the volume. Or the default
        # StorageClass will be used (the default).
        # Set it to "-" to disable dynamic provisioning
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 5Gi
      jobservice:
        jobLog:
          storageClass: ""
          accessMode: ReadWriteOnce
          size: 1Gi
      # If external database is used, the following settings for database will
      # be ignored
      database:
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 1Gi
      # If external Redis is used, the following settings for Redis will
      # be ignored
      redis:
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 1Gi
      trivy:
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 5Gi

  # The initial password of Harbor admin. Change it from portal after launching Harbor
  harborAdminPassword: "P@ssword1"

  imagePullPolicy: IfNotPresent

  # The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
  # Set it as "Recreate" when "RWM" for volumes isn't supported
  updateStrategy:
    type: Recreate

  # debug, info, warning, error or fatal
  logLevel: info

  # The secret key used for encryption. Must be a string of 16 chars.
  secretKey: "not-a-secure-key"

  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      # Scrape interval. If not set, the Prometheus default scrape interval is used.
      interval: ""

  trace:
    enabled: false
    # trace provider: jaeger or otel
    # jaeger should be 1.26+
    provider: otel
    # set sample_rate to 1 if you wanna sampling 100% of trace data; set 0.5 if you wanna sampling 50% of trace data, and so forth
    sample_rate: 1
    # namespace used to differentiate different harbor services
    # namespace:
    # attributes is a key value dict contains user defined attributes used to initialize trace provider
    # attributes:
    #   application: harbor
    jaeger:
      # jaeger supports two modes:
      #   collector mode(uncomment endpoint and uncomment username, password if needed)
      #   agent mode(uncomment agent_host and agent_port)
      endpoint: http://hostname:14268/api/traces
      # username:
      # password:
      # agent_host: hostname
      # export trace data by jaeger.thrift in compact mode
      # agent_port: 6831
    otel:
      endpoint: hostname:4318
      url_path: /v1/traces
      compression: false
      insecure: true
      # timeout is in seconds
      timeout: 10

  # cache layer configurations
  # if this feature enabled, harbor will cache the resource
  # `project/project_metadata/repository/artifact/manifest` in the redis
  # which help to improve the performance of high concurrent pulling manifest.
  cache:
    # default is not enabled.
    enabled: false
    # default keep cache for one day.
    expireHours: 24

  portal:
    image:
      repository: goharbor/harbor-portal
      tag: v2.11.1
    replicas: 1

  core:
    image:
      repository: goharbor/harbor-core
      tag: v2.11.1
    replicas: 1
    # The provider for updating project quota(usage), there are 2 options, redis or db.
    # By default it is implemented by db but you can configure it to redis which
    # can improve the performance of high concurrent pushing to the same project,
    # and reduce the database connections spike and occupies.
    # Using redis will bring up some delay for quota usage updation for display, so only
    # suggest switch provider to redis if you were ran into the db connections spike around
    # the scenario of high concurrent pushing to same project, no improvment for other scenes.
    quotaUpdateProvider: db # Or redis

  jobservice:
    image:
      repository: goharbor/harbor-jobservice
      tag: v2.11.1
    replicas: 1

  registry:
    registry:
      image:
        repository: goharbor/registry-photon
        tag: v2.11.1
    controller:
      image:
        repository: goharbor/harbor-registryctl
        tag: v2.11.1
    replicas: 1
    credentials:
      username: "harbor_registry_user"
      password: "P@ssword1"

  trivy:
    # enabled the flag to enable Trivy scanner
    enabled: true
    image:
      # repository the repository for Trivy adapter image
      repository: goharbor/trivy-adapter-photon
      # tag the tag for Trivy adapter image
      tag: v2.11.1
    replicas: 1
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 1Gi
    # debugMode the flag to enable Trivy debug mode with more verbose scanning log
    debugMode: false
    # vulnType a comma-separated list of vulnerability types. Possible values are `os` and `library`.
    vulnType: "os,library"
    # severity a comma-separated list of severities to be checked
    severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    # ignoreUnfixed the flag to display only fixed vulnerabilities
    ignoreUnfixed: false
    # insecure the flag to skip verifying registry certificate
    # Comma-separated list of what security issues to detect. Possible values are `vuln`, `config` and `secret`. Defaults to `vuln`.
    securityCheck: "vuln"
    # The duration to wait for scan completion
    timeout: 5m0s

  database:
    # if external database is used, set "type" to "external"
    # and fill the connection information in "external" section
    type: internal
    internal:
      image:
        repository: goharbor/harbor-db
        tag: v2.11.1
      password: "P@ssword1"
      # The size limit for Shared memory, pgSQL use it for shared_buffer
      # More details see:
      # https://github.com/goharbor/harbor/issues/15034
      shmSizeLimit: 512Mi
    external:
      host: "192.168.0.1"
      port: "5432"
      username: "user"
      password: "P@ssword1"
      coreDatabase: "registry"
      # "disable" - No SSL
      # "require" - Always SSL (skip verification)
      # "verify-ca" - Always SSL (verify that the certificate presented by the
      # server was signed by a trusted CA)
      # "verify-full" - Always SSL (verify that the certification presented by the
      # server was signed by a trusted CA and the server host name matches the one
      # in the certificate)
      sslmode: "disable"
    # The maximum number of connections in the idle connection pool per pod (core+exporter).
    # If it <=0, no idle connections are retained.
    maxIdleConns: 100
    # The maximum number of open connections to the database per pod (core+exporter).
    # If it <= 0, then there is no limit on the number of open connections.
    # Note: the default number of connections is 1024 for harbor's postgres.
    maxOpenConns: 900
    ## Additional deployment annotations

  redis:
    # if external Redis is used, set "type" to "external"
    # and fill the connection information in "external" section
    type: internal
    internal:
      image:
        repository: goharbor/redis-photon
        tag: v2.11.1
    external:
      # support redis, redis+sentinel
      # addr for redis: <host_redis>:<port_redis>
      # addr for redis+sentinel: <host_sentinel1>:<port_sentinel1>,<host_sentinel2>:<port_sentinel2>,<host_sentinel3>:<port_sentinel3>
      addr: "192.168.0.2:6379"
      # The name of the set of Redis instances to monitor, it must be set to support redis+sentinel
      sentinelMasterSet: ""
      username: ""
      password: "P@ssword1"

  exporter:
    image:
      repository: goharbor/harbor-exporter
      tag: v2.11.1
    replicas: 1
