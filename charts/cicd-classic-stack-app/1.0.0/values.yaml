
global:
  sonraqubeApp:
    enabled: false
  harborApp:
    enabled: false
  forgejoApp:
    enabled: true
  coderApp:
    enabled: false
  jenkinsApp:
    enabled: true


sonarqube:
  params:
    ingress:
      enabled: true
      host: sonarqube.apps.example.com
  persistence:
    enabled: true
  seccompProfile: {}
  prometheusMonitoring:
    podMonitor:
      enabled: true
  postgresql:
    ldap:
      tls: []


harbor:
  expose:
    type: ingress
    ingress:
      hosts:
        core: harbor.apps.example.com
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true


forgejo:
  affinity: {}
  nodeSelector: {}
  securityContext: {}
  params:
    additionalConfigSources:
      secret:
        secretName: "forgejo-configuration"
    persistence:
      enabled: true
      create: true
      claimName: "gitea-shared-storage"
      size: "10Gi"
      storageClass: "vsphere-csi"
      volumeName: ""
      accessModes:
        - "ReadWriteOnce"
      annotations: {}
    customImage:
      gitea: false
      postgresqlHA: false
      redisCluster: false
    customResources:
      gitea: false
      postgresqlHA: true
      redisCluster: true
    customPasswords:
      gitea: true
      postgresqlHA: false
      redisCluster: false
  image:
    registry: "code.forgejo.org"
    repository: "forgejo/forgejo"
    tag: ''
    pullPolicy: "IfNotPresent"
  gitea:
    admin:
      username: "gitea_admin"
      password: "r8sA8CPHD9!bt6d"
      email: "gitea@local.domain"
      passwordMode: "keepUpdated"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  ingress:
    enabled: true
    hosts:
      - host: "forgejo.apps.example.com"
        paths:
        - path: "/"
          pathType: "Prefix"
    tls: []
  # default persistence
  persistence:
    enabled: false
  resources:
    limits:
      cpu: ""
      memory: ""
    requests:
      cpu: ""
      memory: ""
  service:
    http:
      type: "ClusterIP"
      port: 3000
    ssh:
      type: "ClusterIP"
      port: 22
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: "100%"
      maxUnavailable: 0
  postgresql:
    enabled: false
  postgresql-ha:
    enabled: true
    global:
      postgresql:
        password: "gitea"
        database: "gitea"
        username: "gitea"
    metrics:
      enabled: true
      #collectors:
      #  wal: false
      serviceMonitor:
        enabled: true
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: "Retain"
      whenDeleted: "Delete"
    postgresql:
      repmgrPassword: "changeme2"
      postgresPassword: "changeme1"
    pgpool:
      adminPassword: "changeme3"
    resources:
      requests:
        cpu: "250m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    service:
      ports:
        postgresql: 5432
    persistence:
      enabled: true
      size: "8Gi"
      storageClass: ""
  redis-cluster:
    enabled: true
    usePassword: false
    cluster:
      nodes: 3
      replicas: 0
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    persistence:
      enabled: true
      size: "8Gi"
      storageClass: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: "Retain"
      whenDeleted: "Delete"
    redis:
      resources:
        requests:
          cpu: "100m"
          memory: "128Mi"
        limits:
          cpu: "200m"
          memory: "256Mi"
    service:
      ports:
        redis: 6379


coder:
  params:
    ingress:
      enabled: true
      host: "coder.apps.example.com"
    service:
      enabled: true
      type: ClusterIP
  coder:
    env:
      - name: coder-db-postgresql
        valueFrom:
          secretKeyRef:
            name: coder-db-url
            key: url
    ingress:
      enable: false
    service:
      enable: false

postgresql:
  auth:
    username: coder
    password: CODER_password
    database: coderi
  persistence:
    size: 10Gi
  nameOverride: "coder"
  fullnameOverride: ""


jenkins:
  controller:
    installPlugins:
      - kubernetes:4265.v78b_d4a_1c864a_
      - workflow-aggregator:600.vb_57cdd26fdd7
      - git:5.2.2
      - configuration-as-code:1836.vccda_4a_122a_a_e
      - prometheus:780.v7c50a_d288424
    additionalPlugins:
      - pipeline-stage-view:2.34
      - pipeline-utility-steps:2.17.0
      - generic-webhook-trigger:2.2.2
      - gitea:220.v4618c82a_40fb_
      - rebuild:332.va_1ee476d8f6d
    customResources: false
    ingress:
      enabled: true
      hostName: "jenkins.apps.example.com"
    serviceType: ClusterIP
    resources:
      requests:
        memory: "512Mi"
        cpu: "512m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    persistence:
      enabled: true
      accessMode: "ReadWriteOnce"
      size: "8Gi"
    javaOpts: >
      -Xmx2g
      -Djenkins.install.runSetupWizard=false
      -Dorg.jenkinsci.plugins.casc.ConfigurationAsCode.systemConfig=/var/jenkins_home/casc_configs/jenkins-casc.yaml
    prometheus:
      enabled: true
    admin:
      username: "admin"
      password: "password"
