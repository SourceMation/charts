
global:
  sonarqubeApp:
    enabled: true
  harborApp:
    enabled: true
  forgejoApp:
    enabled: true
  coderApp:
    enabled: true
  jenkinsApp:
    enabled: true


sonarqube:
# missing:
# - nameOverride, namespaceOverride
# - updateStrategy
  affinity: {}
  nodeSelector: {}
  seccompProfile: {}
  securityContext:
    fsGroup: 0
  params:
    customImage:
      sonarqube: false
      postgresql: false
    customPasswords:
      sonarqube: false
      postgresql: false
    customResources:
      sonarqube: false
      postgresql: false
  account:
    adminPassword: "P@ssword1"
  image:
    registry: docker.io
    repository: "sonarqube"
    #tag: 10.6.0-{{ .Values.edition }}
    pullPolicy: "IfNotPresent"
    pullSecrets: []
  ingress:
    enabled: true
    hosts:
      - name: "sonarqube.apps.example.com"
  networkPolicy:
    enabled: false
  persistence:
    enabled: true
    size: "5Gi"
    storageClass: ""
    accessMode: "ReadWriteOnce"
  plugins:
    # Define the list of plugins to install. Example:
    # install:
    #   - https://example.com/plugin/ver1.0/plugin.jar"
    install: []
  prometheusMonitoring:
    podMonitor:
      enabled: true
  resources:
    limits:
      cpu: "800m"
      memory: "6144Mi"
      ephemeral-storage: "50Gi"
    requests:
      cpu: "400m"
      memory: "2048Mi"
      ephemeral-storage: "512Mi"
  service:
    type: ClusterIP
    externalPort: 9000
    internalPort: 9000
  postgresql:
    primary:
      affinity: {}
      nodeSelector: {}
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/postgresql
      #tag: 11.14.0-debian-10-r22
      pullPolicy: IfNotPresent
      pullSecrets: []
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    nameOverride: ""
    networkPolicy:
      enabled: false
    postgresqlUsername: "sonar"
    postgresqlPassword: "P@ssword1"
    postgresqlDatabase: "sonar"
    persistence:
      enabled: true
      existingClaim: "{{ .Release.Name }}-data-postgresql-0"
      claimName: "data-postgresql-0"
      size: "20Gi"
      storageClass: ""
      accessMode:
      - "ReadWriteOnce"
    resources:
      limits:
        cpu: "2000m"
        memory: "2Gi"
      requests:
        cpu: "100m"
        memory: "200Mi"
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      port: 5432
      type: ClusterIP
    updateStrategy:
      type: "RollingUpdate"


harbor:
  expose:
    type: ingress
    ingress:
      hosts:
        core: harbor.apps.example.com
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true


forgejo:
# missing:
# - nameOverride, namespaceOverride
# - networkPolicy:
  affinity: {}
  nodeSelector: {}
  securityContext: {}
  params:
    additionalConfigSources:
      secret:
        secretName: "forgejo-configuration"
    persistence:
      enabled: true
      create: true
      claimName: "gitea-shared-storage"
      size: "10Gi"
      storageClass: "vsphere-csi"
      accessModes:
        - "ReadWriteOnce"
      annotations: {}
    customImage:
      gitea: false
      postgresqlHA: false
      redisCluster: false
    customResources:
      gitea: false
      postgresqlHA: false
      redisCluster: false
    customPasswords:
      gitea: true
      postgresqlHA: false
      redisCluster: false
  image:
    registry: "code.forgejo.org"
    repository: "forgejo/forgejo"
    tag: ''
    pullPolicy: "IfNotPresent"
  imagePullSecrets: []
  gitea:
    admin:
      username: "gitea_admin"
      password: "P@ssword1"
      email: "gitea_admin@example.com"
    config:
      # Forgejo app settings section.
      # Check default values here: https://forgejo.org/docs/latest/admin/config-cheat-sheet/#overall-default
      RUN_MODE: "prod"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  ingress:
    enabled: true
    hosts:
      - host: "forgejo.apps.example.com"
        paths:
        - path: "/"
          pathType: "Prefix"
    tls: []
  # default persistence
  persistence:
    enabled: false
  resources: {}
  service:
    http:
      type: "ClusterIP"
      port: 3000
    ssh:
      type: "ClusterIP"
      port: 22
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: "100%"
      maxUnavailable: 0
  postgresql:
    enabled: false
  postgresql-ha:
    enabled: true
    global:
      postgresql:
        password: "P@ssword1"
        database: "gitea"
        username: "gitea"
    metrics:
      enabled: true
      #collectors:
      #  wal: false
      serviceMonitor:
        enabled: true
    nameOverride: ""
    namespaceOverride: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: "Retain"
      whenDeleted: "Delete"
    postgresql:
      affinity: {}
      nodeSelector: {}
      image:
        registry: docker.io
        repository: bitnami/postgresql-repmgr
        #tag: 16.3.0-debian-12-r18
        pullPolicy: IfNotPresent
        pullSecrets: []
      networkPolicy:
        enabled: true
        allowExternal: true
        allowExternalEgress: true
      repmgrPassword: "P@ssword1"
      postgresPassword: "P@ssword1"
      updateStrategy:
        type: RollingUpdate
    pgpool:
      adminPassword: "P@ssword1"
    resources:
      requests:
        cpu: "250m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    service:
      type: ClusterIP
      ports:
        postgresql: 5432
    persistence:
      enabled: true
      size: "8Gi"
      storageClass: ""
      accessModes:
      - ReadWriteOnce
  redis-cluster:
    enabled: true
    usePassword: false
    cluster:
      nodes: 3
      replicas: 0
    image:
      registry: docker.io
      repository: bitnami/redis-cluster
      #tag: 7.2.5-debian-12-r4
      pullPolicy: IfNotPresent
      pullSecrets: []
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    nameOverride: ""
    networkPolicy:
      enabled: true
      allowExternal: true
      allowExternalEgress: true
    persistence:
      enabled: true
      size: "8Gi"
      storageClass: ""
      accessModes:
      - ReadWriteOnce
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: "Retain"
      whenDeleted: "Delete"
    redis:
      affinity: {}
      nodeSelector: {}
      resources:
        requests:
          cpu: "100m"
          memory: "128Mi"
        limits:
          cpu: "200m"
          memory: "256Mi"
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          partition: 0
    service:
      type: ClusterIP
      ports:
        redis: 6379


coder:
  coder:
    env:
      - name: coder-db-postgresql
        valueFrom:
          secretKeyRef:
            name: coder-db-url
            key: url
    ingress:
      enable: true
      host: "coder.apps.example.com"
      tls:
        enable: false
        secretName: ""
    service:
      enable: true
      type: ClusterIP
      externalTrafficPolicy: Cluster
      # if service.type LoadBalancer
      loadBalancerIP: ""
    serviceAccount:
      name: coder
    image:
      repo: "ghcr.io/coder/coder"
      tag: "v2.13.2"
      pullSecrets: []
    certs:
      secrets: []
    volumes: []
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - "coder"
              topologyKey: kubernetes.io/hostname
            weight: 1
    nodeSelector: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false

postgresql:
  auth:
    username: coder
    password: P@ssword1
    database: coderi
  primary:
    enabled: true
    persistence:
      accessModes:
        - ReadWriteOnce
      storageClass: ""
      volumeName: "data"
      size: "10Gi"
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: "Retain"
      whenDeleted: "Delete"
  
  nameOverride: "coder-postgresql"
  fullnameOverride: ""


jenkins:
  params:
    ingress:
      enabled: false
      hostName: "jenkins.apps.example.com"
  controller:
    installPlugins:
      - kubernetes:4265.v78b_d4a_1c864a_
      - workflow-aggregator:600.vb_57cdd26fdd7
      - git:5.2.2
      - configuration-as-code:1836.vccda_4a_122a_a_e
      - cloudbees-disk-usage-simple:203.v3f46a_7462b_1a_
      - prometheus:780.v7c50a_d288424
    additionalPlugins:
      - pipeline-stage-view:2.34
      - pipeline-utility-steps:2.17.0
      - generic-webhook-trigger:2.2.2
      - gitea:220.v4618c82a_40fb_
      - rebuild:332.va_1ee476d8f6d
    customResources: false
    # default ingress
    ingress:
      enabled: false
    serviceType: ClusterIP
    resources:
      requests:
        memory: "512Mi"
        cpu: "512m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    persistence:
      enabled: true
      accessMode: "ReadWriteOnce"
      storageClass: "" 
      size: "8Gi"
    javaOpts: >
      -Xmx2g
      -Djenkins.install.runSetupWizard=false
      -Dorg.jenkinsci.plugins.casc.ConfigurationAsCode.systemConfig=/var/jenkins_home/casc_configs/jenkins-casc.yaml
    prometheus:
      enabled: true
    admin:
      username: "admin"
      password: "P@ssword1"
