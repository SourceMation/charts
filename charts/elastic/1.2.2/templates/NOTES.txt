

███████╗██╗      █████╗ ███████╗████████╗██╗ ██████╗
██╔════╝██║     ██╔══██╗██╔════╝╚══██╔══╝██║██╔════╝
█████╗  ██║     ███████║███████╗   ██║   ██║██║     
██╔══╝  ██║     ██╔══██║╚════██║   ██║   ██║██║     
███████╗███████╗██║  ██║███████║   ██║   ██║╚██████╗
╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝ ╚═════╝
by Linux Polska

1. Check healthy of elastic services

kubectl -n {{ .Release.Namespace }} get po

kubectl -n {{ .Release.Namespace }} get elastic

2. Get the application URLs by running these commands:

kubectl -n {{ .Release.Namespace }} get ingress

3. Get the application VIPs by running these commands (if kube-vip configured):

kubectl -n {{ .Release.Namespace }} get svc -o \
custom-columns='NAME:.metadata.name,TYPE:.spec.type,IP:..status.loadBalancer.ingress[0].ip,PORT:.status.loadBalancer.ingress[0].ports[0].port' | grep -v 'none'

{{- if  not $.Values.tlsSecretName  }}

4. Get self-signed CA Elasticsearch and APM

kubectl -n {{ .Release.Namespace }} get secret {{ include "common.names.shortname" $ }}-es-http-certs-public \
-o go-template='{{`{{ index .data "ca.crt" | base64decode `}} }}'

5. Get self-signed CA Kibana

kubectl -n {{ .Release.Namespace }} get secret {{ include "common.names.shortname" $ }}-kb-http-certs-public \
-o go-template='{{`{{ index .data "ca.crt" | base64decode `}} }}'

{{- else }}

4. Get own-generated CA

kubectl -n {{ $.Release.Namespace }} get secret {{ $.Values.tlsSecretName }} \
-o go-template='{{`{{ index .data "ca.crt" | base64decode `}} }}'

{{- end }}

6. Get default password for elastic user

kubectl -n {{ .Release.Namespace }} get secret {{ include "common.names.shortname" $ }}-es-elastic-user -o go-template='{{`{{ .data.elastic | base64decode `}} }}'

7. Check autoscaling conditions (if autoscaling enabled)

for i in $(kubectl -n {{ .Release.Namespace }} get ElasticsearchAutoscaler | awk '{ print $1 }' | grep {{ .Release.Name }}); do kubectl get elasticsearchautoscaler $i -o jsonpath='{ .status.conditions }' | jq; done

8. Check autoscaling policies (if autoscaling enabled)

for i in $(kubectl -n {{ .Release.Namespace }} get ElasticsearchAutoscaler | awk '{ print $1 }' | grep {{ .Release.Name }}); do kubectl get elasticsearchautoscaler $i -o jsonpath='{ .status.policies }' | jq; done

#
