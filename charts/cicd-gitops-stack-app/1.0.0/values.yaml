
global:
  argocdApp:
    enabled: true
  tektonApp:
    enabled: false
  shipwrightcliApp:
    enabled: false
  shipwrightoperatorApp:
    enabled: false
  gitlabApp:
    enabled: false
  sonarqubeApp:
    enabled: true
  harborApp:
    enabled: true
  coderApp:
    enabled: true


tekton:
# missing:
# - overrideNamespace
# - ingress (hosts,enabled)
# - serviceType
# - strategyType
# - pvc
  nameOverride: ""
  openshift:
    enabled: false
  installCRDs: true
  operator:
    image:
      tag: ""
      pullPolicy: IfNotPresent
    autoInstallComponents: true
    defaultTargetNamespace: ""
  pruner:
    image:
      tag: "95c3ec1f6f442b4d14070e0c421e16eca919754a78c2df11e30be975b971ebe5"
  webhook:
    hostNetwork: false
    dnsPolicy: ""
    httpsWebhookPort: 8443
    image:
      tag: ""
      pullPolicy: IfNotPresent
  webhookProxy:
    image:
      tag: ""
  service:
    createServiceMonitor: true
    metricsDomain: tekton.dev/operator
  ingress:
    enabled: true
    host: "tekton-operator.apps.example.com"
  affinity: {}
  imagePullSecrets: []
  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

sonarqube:
# missing:
# - nameOverride, namespaceOverride
# - updateStrategy
  affinity: {}
  nodeSelector: {}
  seccompProfile: {}
  securityContext:
    fsGroup: 0
  account:
    adminPassword: "P@ssword1"
  image:
    registry: docker.io
    repository: "sonarqube"
    #tag: 10.6.0-{{ .Values.edition }}
    pullPolicy: "IfNotPresent"
    #pullSecrets: []
  ingress:
    enabled: true
    hosts:
      - name: "sonarqube.apps.example.com"
  networkPolicy:
    enabled: false
  persistence:
    enabled: true
    size: "5Gi"
    storageClass: ""
    accessMode: "ReadWriteOnce"
  plugins:
    # Define the list of plugins to install. Example:
    # install:
    #   - https://example.com/plugin/ver1.0/plugin.jar"
    install: []
  prometheusMonitoring:
    podMonitor:
      enabled: true
  resources:
    limits:
      cpu: "800m"
      memory: "6144Mi"
      ephemeral-storage: "50Gi"
    requests:
      cpu: "400m"
      memory: "2048Mi"
      ephemeral-storage: "512Mi"
  service:
    type: ClusterIP
    externalPort: 9000
    internalPort: 9000
  postgresql:
    primary:
      affinity: {}
      nodeSelector: {}
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/postgresql
      #tag: 11.14.0-debian-10-r22
      pullPolicy: IfNotPresent
      #pullSecrets: 
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    nameOverride: ""
    networkPolicy:
      enabled: false
    postgresqlUsername: "sonar"
    postgresqlPassword: "P@ssword1"
    postgresqlDatabase: "sonar"
    persistence:
      enabled: true
      existingClaim: "{{ .Release.Name }}-data-gitlab-postgresql-0"
      claimName: "data-postgresql-0"
      size: "20Gi"
      storageClass: ""
      accessMode:
      - "ReadWriteOnce"
    resources:
      limits:
        cpu: "2000m"
        memory: "2Gi"
      requests:
        cpu: "100m"
        memory: "200Mi"
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      port: 5432
      type: ClusterIP
    updateStrategy:
      type: "RollingUpdate"


harbor:
# missing:
# - nameOverride, namespaceOverride
# - networkPolicy:
  expose:
    type: ingress
    ingress:
      hosts:
        core: harbor.apps.example.com
    nodePort:
      ports:
        http:
          nodePort: 30002
        https:
          nodePort: 30003
  persistence:
    enabled: true
    resourcePolicy: ""
    persistentVolumeClaim:
      registry:
        storageClass: ""
        size: 5Gi
      jobservice:
        storageClass: ""
        size: 1Gi
      database:
        storageClass: ""
        size: 1Gi
      redis:
        storageClass: ""
        size: 1Gi
      trivy:
        storageClass: ""
        size: 5Gi

  imagePullPolicy: IfNotPresent
  #imagePullSecrets:
  ##  - name: docker-registry-secret
  ##  - name: internal-registry-secret
  #
  updateStrategy:
    type: RollingUpdate

  harborAdminPassword: "P@ssword1"
  secretKey: "not-a-secure-key-min-16-characters"

  nginx:
    image:
      repository: goharbor/nginx-photon
      tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}

  portal:
    image:
      repository: goharbor/harbor-portal
      tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}

  core:
    image:
      repository: goharbor/harbor-core
      tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}

  jobservice:
    image:
      repository: goharbor/harbor-jobservice
      tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}

  registry:
    registry:
      image:
        repository: goharbor/registry-photon
        tag: v2.10.2
    controller:
      image:
        repository: goharbor/harbor-registryctl
        tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}
    credentials:
      username: "harbor_registry_user"
      password: "harbor_registry_password"

  trivy:
    image:
      repository: goharbor/trivy-adapter-photon
      tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}

  database:
    internal:
      image:
        repository: goharbor/harbor-db
        tag: v2.10.2
      password: "P@ssword1"
      nodeSelector: {}
      tolerations: []
      affinity: {}

  redis:
    internal:
      image:
        repository: goharbor/redis-photon
        tag: v2.10.2
      nodeSelector: {}
      tolerations: []
      affinity: {}

  exporter:
    image:
      repository: goharbor/harbor-exporter
      tag: v2.10.2
    nodeSelector: {}
    tolerations: []
    affinity: {}

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  trace:
    enabled: true
    provider: otel

coder:
  coder:
    env:
      - name: coder-db-postgresql
        valueFrom:
          secretKeyRef:
            name: coder-db-url
            key: url
    ingress:
      enable: true
      host: "coder.apps.example.com"
      tls:
        enable: false
        secretName: ""
    service:
      enable: true
      type: ClusterIP
      externalTrafficPolicy: Cluster
      # if service.type LoadBalancer
      loadBalancerIP: ""
    serviceAccount:
      name: coder
    image:
      repo: "ghcr.io/coder/coder"
      tag: "v2.13.2"
      pullSecrets: []
    certs:
      secrets: []
    volumes: []
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - "coder"
              topologyKey: kubernetes.io/hostname
            weight: 1
    nodeSelector: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false

postgresql:
  auth:
    username: coder
    password: P@ssword1
    database: coderi
  primary:
    enabled: true
    persistence:
      accessModes:
        - ReadWriteOnce
      storageClass: ""
      volumeName: "data"
      size: "10Gi"
    persistentVolumeClaimRetentionPolicy:
      enabled: true
      whenScaled: "Retain"
      whenDeleted: "Delete"
  
  nameOverride: "coder-postgresql"
  fullnameOverride: ""

argo-cd:
  nameOverride: cicd-gitops-stack-app
  fullnameOverride: cicd-gitops-stack-app
  namespaceOverride: ""
  crds:
    install: true
    keep: false
  global:
    domain: argocd.example.com
    additionalLabels:
      app: argo-cd
    image:
      repository: quay.io/argoproj/argocd
      tag: ""
      imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    logging:
      format: json
      level: info
    podLabels: {}
    securityContext: {}
    # runAsUser: 999 
    # runAsGroup: 999
    # fsGroup: 999
    networkPolicy:
      create: false
      defaultDenyIngress: false
    nodeSelector: {}
    affinity:
      podAntiAffinity: soft
      nodeAffinity:
        type: hard
        matchExpressions: []
          # - key: topology.kubernetes.io/zone
          #   operator: In
          #   values:
          #    - antarctica-east1
    deploymentStrategy: {}
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 25%
      #   maxUnavailable: 25%
  configs:
    cm:
      create: true
      admin.enabled: true
      timeout.reconciliation: 180s
    params:
      server.insecure: false
    rbac:
      create: true
    ssh:
      #ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
      extraHosts: ''
    repositories: {}
      # private-helm-repo:
      #   url: https://my-private-chart-repo.internal
      #   name: private-repo
      #   type: helm
      #   password: my-password
      #   username: my-username
    secret:
      createSecret: true
      # -- Shared secret for authenticating GitHub webhook events
      githubSecret: ""
      # -- Shared secret for authenticating GitLab webhook events
      gitlabSecret: ""
  redis:
    enabled: true
    image:
      repository: public.ecr.aws/docker/library/redis
      tag: 7.2.4-alpine
      imagePullPolicy: ""
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
    metrics:
      enabled: false
      serviceMonitor:
        enabled: true
        interval: 30s
  server:
    name: server
    replicas: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    image:
      repository: ""
      tag: ""
      imagePullPolicy: ""
    imagePullSecrets: []
    containerSecurityContext:
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
        - ALL
    service:
      type: ClusterIP
      # if servicetype LoadBalancer
      loadBalancerIP: ""
      externalTrafficPolicy: Cluster
    metrics:
      enabled: false
      serviceMonitor:
        enabled: true
        interval: 30s
        scrapeTimeout: ""
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      hostname: ""
  repoServer:
    resources:
      limits:
        cpu: 50m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
    metrics:
      enabled: false
      serviceMonitor:
        enabled: true
        interval: 30s 