global:
  rabbitmqOperator:
    enabled: true

rke2rabbitmqope:
  global:
  #  imageRegistry: ""
  #  imagePullSecrets: []
  #  defaultStorageClass: ""
  #  storageClass: ""
    security:
      allowInsecureImages: true
    compatibility:
      openshift:
        adaptSecurityContext: auto
  #nameOverride: ""
  #fullnameOverride: ""
  #clusterDomain: cluster.local
  rabbitmqImage:
    registry: docker.io
    repository: sourcemation/rabbitmq-4
    tag: "4.1.4-20250925"
    digest: ""
    pullSecrets: []
  credentialUpdaterImage:
    registry: docker.io
    repository: sourcemation/rabbitmq-default-user-credential-updater
    tag: "1.0.8-20250930"
    digest: ""
    pullSecrets: []
  clusterOperator:
    replicaCount: 2
    pdb:
      create: true
      minAvailable: "1"
    #  maxUnavailable: ""
  #  affinity: {}
  #  nodeSelector: {}
  #  podAntiAffinityPreset: soft
  #  containerSecurityContext:
  #    enabled: true
  #    seLinuxOptions: {}
  #    runAsUser: 1001
  #    runAsGroup: 1001
  #    runAsNonRoot: true
  #    privileged: false
  #    readOnlyRootFilesystem: true
  #    allowPrivilegeEscalation: false
  #    capabilities:
  #      drop: ["ALL"]
  #    seccompProfile:
  #      type: "RuntimeDefault"
  #  containerPorts:
  #    metrics: 9782
    image:
      registry: docker.io
      repository: sourcemation/rabbitmq-cluster-operator
      tag: "2.16.1-20250922"
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
  #  metrics:
  #    service:
  #      enabled: false
  #      type: ClusterIP
  #      ports:
  #        http: 80
  #    serviceMonitor:
  #      enabled: false
  #    podMonitor:
  #      enabled: false
    networkPolicy:
      enabled: true
  #    kubeAPIServerPorts: [443, 6443, 8443]
  #    allowExternal: true
  #    allowExternalEgress: true
  #    ingressNSMatchLabels:
  #      kubernetes.io/metadata.name: cattle-monitoring-system
  #    ingressNSPodMatchLabels:
  #      app.kubernetes.io/name: prometheus
      extraIngress:
      - ports:
        - port: 9782
          protocol: TCP
  #      from:
  #      - namespaceSelector: {}
  #        podSelector: {}
  #  rbac:
  #    create: true
  #    clusterRole:
  #      customRules: []
  #      extraRules: []
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "150m"
        memory: "192Mi"
  #  serviceAccount:
  #    create: true
    watchAllNamespaces: true
  #  watchNamespaces: []
    updateStrategy:
      type: RollingUpdate

  msgTopologyOperator:
    enabled: false
    replicaCount: 2
    image:
      registry: docker.io
      repository: sourcemation/rabbitmq-messaging-topology-operator
      tag: "1.17.4-20250930"
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    watchAllNamespaces: true
  #  watchNamespaces: []
  #  hostNetwork: "false"
  #  dnsPolicy: "ClusterFirst"
  #  skipCreateAdmissionWebhookConfig: false
  #  existingWebhookCertSecret: ""
  #  existingWebhookCertCABundle: ""
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "150m"
        memory: "192Mi"
    pdb:
      create: true
      minAvailable: "1"
  #  containerSecurityContext:
  #    enabled: true
  #    seLinuxOptions: {}
  #    runAsUser: 1001
  #    runAsGroup: 1001
  #    runAsNonRoot: true
  #    privileged: false
  #    readOnlyRootFilesystem: true
  #    allowPrivilegeEscalation: false
  #    capabilities:
  #      drop: ["ALL"]
  #    seccompProfile:
  #      type: "RuntimeDefault"
  #  containerPorts:
  #    metrics: 8080
  #  affinity: {}
  #  podAffinityPreset: ""
  #  podAntiAffinityPreset: soft
  #  nodeSelector: {}
    service:
      type: ClusterIP
  #    ports:
  #      webhook: 443
  #  metrics:
  #    service:
  #      enabled: false
  #      type: ClusterIP
  #      ports:
  #        http: 80
  #      externalTrafficPolicy: Cluster
  #    serviceMonitor:
  #      enabled: false
  #    podMonitor:
  #      enabled: true
  #      interval: 30s
  #      scrapeTimeout: 30s
    networkPolicy:
      enabled: true
  #    kubeAPIServerPorts: [443, 6443, 8443]
  #    allowExternal: true
  #    allowExternalEgress: true
      extraIngress:
      - ports:
        - port: 8080
          protocol: TCP
  #  serviceAccount:
  #    create: true
  #  rbac:
  #    create: true
    updateStrategy:
      type: RollingUpdate

  useCertManager: false
